// Get Layout Spacers
@function space($type, $variation: 'base') {
  @return map-get(map-get($spacing, $type), $variation);
}

@function mg($map: 'forms', $setting: 'base', $variation: '') {
  @if map-has-key($map, $setting) {
    @return map-get(map-get($map, $setting), $variation);
  }

  @warn "Unknown `#{$setting}` in $map.";
  @return null;
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/*============================================================================
  Layer promotion mixin for creating smoother animations with higher FPS.
==============================================================================*/
@mixin promote-layer($properties: transform) {
  -webkit-transform: translateZ(0); // translateZ hack
  will-change: $properties; // spec
}

@mixin list-spacer($type, $h-spacing, $v-spacing: $h-spacing) {
  // margin-left: $h-spacing * -1;
  // margin-right: $h-spacing * -1;
  // width: calc( 100% + #{ $h-spacing * 2});

  @if $type == 'loop' {
    .Entry {
      padding: $v-spacing $h-spacing;
    }
  }

  @if $type == 'nav' {
    .Nav__item > a {
      padding: 0 $h-spacing;
    }
    .Nav__item > button {
      margin: 0 $h-spacing;
    }
  }
}

/**
 * Fix for vw, vh, vmin, vmax on iOS 7.
 * http://caniuse.com/#feat=viewport-units
 *
 * This fix works by replacing viewport units with px values on known screen sizes.
 *
 * iPhone 6 and 6 Plus cannot run iOS 7, so are not targeted by this fix.
 * Target devices running iOS 8+ will incidentally execute the media query,
 * but this will still produce the expected result; so this is not a problem.
 *
 * As an example, replace:
 *
 *   height: 50vh;
 *   font-size: 5vmin;
 *
 * with:
 *
 *   @include viewport-unit(height, 50vh);
 *   @include viewport-unit(font-size, 5vmin);
 */
@mixin viewport-unit($property, $value) {
  #{$property}: $value;

  $unit: unit($value);

  @if (index((vw, vh, vmin, vmax), $unit) != null) {
    $devices: (
      (768px, 1024px),
      // iPad (all versions) (320px, 480px),
      // iPhone 4 (320px, 568px) // iPhone 5,
      5c,
      5s
    );

    @each $device in $devices {
      $device-width: nth($device, 1);
      $device-height: nth($device, 2);

      $device-query: 'only screen and (-webkit-min-device-pixel-ratio: 1)';
      $device-query: '#{$device-query} and (device-width: #{$device-width})';
      $device-query: '#{$device-query} and (device-height: #{$device-height})';

      $percent: $value /
        ($value * 0 + 1); // see https://github.com/sass/sass/issues/533

      $percent-width: $device-width * $percent / 100;
      $percent-height: $device-height * $percent / 100;

      @if ($unit == vmin or $unit == vmax) {
        @media #{$device-query} {
          #{$property}: if($unit == vmin, $percent-width, $percent-height);
        }
      } @else {
        @media #{$device-query} and (orientation: portrait) {
          #{$property}: if($unit == vw, $percent-width, $percent-height);
        }

        @media #{$device-query} and (orientation: landscape) {
          #{$property}: if($unit == vw, $percent-height, $percent-width);
        }
      }
    }
  }
}

@mixin inline_pointer(
  $direction,
  $height,
  $width,
  $fill,
  $stroke,
  $stroke-width
) {
  position: relative;
  display: inline-block; // Takes up space in the DOM

  // Standard triangle sheinagans
  width: 0;
  height: 0;
  border-style: solid;
  border-color: transparent;

  // Nuke the border depending on direction
  border-#{$direction}: 0;

  // Since the border is nuked, now color the oposite border
  // STROKE
  @if $direction == 'top' {
    border-bottom-color: $stroke;
  }
  @if $direction == 'bottom' {
    border-top-color: $stroke;
  }
  @if $direction == 'left' {
    border-right-color: $stroke;
  }
  @if $direction == 'right' {
    border-left-color: $stroke;
  }

  // Height of the pointer
  border-width: $height;
  // Width of the pointer
  border-right-width: $width / 2;
  border-left-width: $width / 2;

  // Fill
  &::after {
    // Standart pesudo element stuff
    content: '';
    position: absolute;

    // Standard triangle sheinagans
    width: 0;
    height: 0;
    border-style: solid;
    border-color: transparent;

    // Nuke the border depending on direction
    border-#{$direction}: 0;

    // Color the opposite diirection
    // Postioning for the after state
    @if $direction == 'top' {
      border-bottom-color: $fill;
      bottom: -$height;
      left: (-$width / 2) + $stroke-width;
    }
    @if $direction == 'bottom' {
      border-top-color: $fill;
      top: -$height;
      left: (-$width / 2) + $stroke-width;
    }
    @if $direction == 'left' {
      border-right-color: $fill;
      left: $stroke-width;
      bottom: -$height + $stroke-width;
    }
    @if $direction == 'right' {
      border-left-color: $fill;
      right: $stroke-width;
      bottom: -$height + $stroke-width;
    }

    // Width of the after state
    // something bellow is calcuated wrong #TODO
    border-width: $height - $stroke-width;
    border-right-width: (($width / 2) - $stroke-width);
    border-left-width: (($width / 2) - $stroke-width);
  }
}
